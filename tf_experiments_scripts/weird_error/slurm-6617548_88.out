I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: Tesla K20m
major: 3 minor: 5 memoryClockRate (GHz) 0.7055
pciBusID 0000:02:00.0
Total memory: 4.66GiB
Free memory: 4.59GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla K20m, pci bus id: 0000:02:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617426_141.out', 'slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'slurm-6617426_60.out', 'slurm-6617426_161.out', 'slurm-6617426_66.out', 'slurm-6617426_117.out', 'slurm-6617426_136.out', 'slurm-6617426_54.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'slurm-6617548_84.out', 'pickle_file', 'slurm-6617425_154.out', 'slurm-6617426_181.out', 'slurm-6617426_160.out', '1', 'slurm-6617426_142.out', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'slurm-6617426_65.out', 'slurm-6617426_56.out', 'h_add_data_and_mesh.npz', 'slurm-6617548_83.out', 'slurm-6617548_87.out', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'slurm-6617426_70.out', 'slurm-6617548_78.out', 'slurm-6617426_74.out', 'slurm-6617426_162.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', 'slurm-6617548_86.out', '.swn', 'slurm-6617426_12.out', 'slurm-6617548_80.out', 'slurm-6617425_13.out', 'test_print.py', 'slurm-6617426_123.out', 'slurm-6617426_115.out', 'om_f_8D_single_relu', 'slurm-6617426_116.out', 'slurm-6617426_73.out', 'slurm-6617425_27.out', 'slurm-6617426_53.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'slurm-6617426_134.out', 'slurm-6617426_62.out', 'slurm-6617426_121.out', 'slurm-6617426_122.out', 'slurm-6617426_119.out', 'slurm-6617426_69.out', 'batch_main.py', 'slurm-6617426_127.out', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'slurm-6617548_81.out', 'slurm-6617548_77.out', 'slurm-6617426_68.out', 'os_walk_test', 'slurm-6617426_72.out', 'slurm-6617426_135.out', 'slurm-6617426_159.out', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617426_71.out', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'slurm-6617426_57.out', 'slurm-6617426_143.out', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'slurm-6617426_52.out', 'slurm-6617548_79.out', 'slurm-6617426_58.out', 'output.file', 'slurm-6617426_137.out', 'slurm-6617426_124.out', 'hp_gpu', 'slurm-6617426_144.out', 'slurm-6617425_21.out', 'slurm-6617426_145.out', 'slurm-6617425_167.out', 'my_tf_proj.egg-info', 'slurm-6617426_120.out', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617426_140.out', 'slurm-6617425_3.out', 'slurm-6617548_76.out', 'slurm-6617425_9.out', 'slurm-6617548_88.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'slurm-6617426_163.out', 'extract_results_matplotlib.py', '.swp', 'slurm-6617425_162.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617426_126.out', 'slurm-6617425_22.out', 'slurm-6617548_85.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'slurm-6617548_82.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'slurm-6617426_139.out', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617425_6.out', 'slurm-6617426_63.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617426_64.out', 'slurm-6617426_146.out', 'slurm-6617426_129.out', 'slurm-6617425_19.out', 'slurm-6617426_167.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'slurm-6617426_128.out', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617426_67.out', 'slurm-6617426_59.out', 'slurm-6617426_177.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'slurm-6617426_61.out', 'slurm-6617426_118.out', 'slurm-6617426_138.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617426_55.out', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
l  2
+++> std mu for inits_C:  [0, 2.446022533547398]
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 23.3655 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 50, train error: 1.32232 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 100, train error: 1.12352 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 150, train error: 0.287061 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 200, train error: 0.229213 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 250, train error: 0.155064 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 300, train error: 0.122216 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 350, train error: 0.105904 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 400, train error: 0.101761 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 450, train error: 0.100359 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 500, train error: 0.0996698 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 550, train error: 0.099296 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 600, train error: 0.0991888 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 650, train error: 0.0991977 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 700, train error: 0.0992488 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 750, train error: 0.0992569 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 800, train error: 0.0991007 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 850, train error: 0.0989816 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 900, train error: 0.0990739 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 950, train error: 0.0994331 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1000, train error: 0.0998468 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1050, train error: 0.099939 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1100, train error: 0.0997229 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1150, train error: 0.0995726 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1200, train error: 0.0994156 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1250, train error: 0.0995462 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1300, train error: 0.0996465 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1350, train error: 0.0996911 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1400, train error: 0.0997577 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1450, train error: 0.100043 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1500, train error: 0.100011 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1550, train error: 0.0998321 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1600, train error: 0.100147 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1650, train error: 0.0998751 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1700, train error: 0.0995115 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1750, train error: 0.0997956 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1800, train error: 0.099846 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1850, train error: 0.0997367 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1900, train error: 0.10004 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 1950, train error: 0.100201 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2000, train error: 0.0998596 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2050, train error: 0.10014 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2100, train error: 0.100295 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2150, train error: 0.100029 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2200, train error: 0.100568 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2250, train error: 0.100452 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2300, train error: 0.100474 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2350, train error: 0.100512 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2400, train error: 0.100045 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2450, train error: 0.100222 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2500, train error: 0.100958 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2550, train error: 0.100581 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2600, train error: 0.100635 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2650, train error: 0.100743 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2700, train error: 0.101181 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2750, train error: 0.101218 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2800, train error: 0.10104 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2850, train error: 0.101325 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2900, train error: 0.101658 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 2950, train error: 0.101325 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3000, train error: 0.101583 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3050, train error: 0.101416 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3100, train error: 0.100917 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3150, train error: 0.101443 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3200, train error: 0.100974 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3250, train error: 0.10125 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3300, train error: 0.101266 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3350, train error: 0.101938 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3400, train error: 0.101128 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3450, train error: 0.100946 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3500, train error: 0.101221 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3550, train error: 0.101695 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3600, train error: 0.101841 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3650, train error: 0.101422 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3700, train error: 0.101819 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3750, train error: 0.101447 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3800, train error: 0.102153 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3850, train error: 0.101668 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3900, train error: 0.101771 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 3950, train error: 0.101794 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4000, train error: 0.101762 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4050, train error: 0.101732 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4100, train error: 0.101651 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4150, train error: 0.10202 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4200, train error: 0.102267 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4250, train error: 0.101986 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4300, train error: 0.102182 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4350, train error: 0.102931 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4400, train error: 0.102445 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4450, train error: 0.102601 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4500, train error: 0.102925 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4550, train error: 0.102601 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4600, train error: 0.10354 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4650, train error: 0.102419 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4700, train error: 0.10386 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4750, train error: 0.103152 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4800, train error: 0.103192 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4850, train error: 0.104353 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4900, train error: 0.103541 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 4950, train error: 0.103892 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5000, train error: 0.104469 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5050, train error: 0.103574 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5100, train error: 0.102597 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5150, train error: 0.105469 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5200, train error: 0.103231 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5250, train error: 0.104807 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5300, train error: 0.104998 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5350, train error: 0.103906 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5400, train error: 0.104396 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5450, train error: 0.104844 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5500, train error: 0.104812 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5550, train error: 0.104732 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5600, train error: 0.106699 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5650, train error: 0.105989 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5700, train error: 0.104248 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5750, train error: 0.105133 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5800, train error: 0.10611 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5850, train error: 0.105758 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5900, train error: 0.107025 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 5950, train error: 0.105929 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6000, train error: 0.10702 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6050, train error: 0.107726 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6100, train error: 0.10687 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6150, train error: 0.106135 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6200, train error: 0.106198 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6250, train error: 0.106186 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6300, train error: 0.105113 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6350, train error: 0.107534 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6400, train error: 0.106968 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6450, train error: 0.107129 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6500, train error: 0.105619 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6550, train error: 0.106878 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6600, train error: 0.108071 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6650, train error: 0.109309 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6700, train error: 0.107406 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6750, train error: 0.106391 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6800, train error: 0.106923 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6850, train error: 0.108889 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6900, train error: 0.108689 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 6950, train error: 0.108725 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7000, train error: 0.107398 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7050, train error: 0.106695 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7100, train error: 0.107993 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7150, train error: 0.107445 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7200, train error: 0.10821 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7250, train error: 0.106846 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7300, train error: 0.106038 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7350, train error: 0.107637 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7400, train error: 0.108902 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7450, train error: 0.112165 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7500, train error: 0.10771 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7550, train error: 0.108395 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7600, train error: 0.108198 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7650, train error: 0.109203 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7700, train error: 0.108927 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7750, train error: 0.10846 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7800, train error: 0.107737 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7850, train error: 0.107164 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7900, train error: 0.108756 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 7950, train error: 0.110455 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8000, train error: 0.108977 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8050, train error: 0.108954 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8100, train error: 0.109037 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8150, train error: 0.109521 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8200, train error: 0.107741 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8250, train error: 0.107143 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8300, train error: 0.109441 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8350, train error: 0.109817 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8400, train error: 0.111533 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8450, train error: 0.112134 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8500, train error: 0.112152 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8550, train error: 0.110801 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8600, train error: 0.112355 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8650, train error: 0.11287 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8700, train error: 0.114101 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8750, train error: 0.113426 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8800, train error: 0.111236 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8850, train error: 0.112893 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8900, train error: 0.112309 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 8950, train error: 0.114358 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9000, train error: 0.113251 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9050, train error: 0.116279 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9100, train error: 0.115667 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9150, train error: 0.116199 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9200, train error: 0.114303 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9250, train error: 0.11505 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9300, train error: 0.11614 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9350, train error: 0.113601 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9400, train error: 0.118276 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9450, train error: 0.116613 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9500, train error: 0.118063 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9550, train error: 0.116016 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9600, train error: 0.114816 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9650, train error: 0.1166 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9700, train error: 0.117533 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9750, train error: 0.1202 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9800, train error: 0.1177 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9850, train error: 0.118004 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9900, train error: 0.116124 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 9950, train error: 0.118826 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10000, train error: 0.11825 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10050, train error: 0.119458 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10100, train error: 0.118125 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10150, train error: 0.119264 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10200, train error: 0.118025 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10250, train error: 0.121765 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10300, train error: 0.120067 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10350, train error: 0.120656 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10400, train error: 0.121024 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10450, train error: 0.119009 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10500, train error: 0.121829 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10550, train error: 0.121929 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10600, train error: 0.123046 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10650, train error: 0.121621 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10700, train error: 0.119899 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10750, train error: 0.12144 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10800, train error: 0.120005 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10850, train error: 0.123145 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10900, train error: 0.121177 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 10950, train error: 0.122414 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11000, train error: 0.125077 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11050, train error: 0.122626 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11100, train error: 0.121859 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11150, train error: 0.121973 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11200, train error: 0.122078 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11250, train error: 0.121129 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11300, train error: 0.124727 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11350, train error: 0.12254 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11400, train error: 0.121993 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11450, train error: 0.121774 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11500, train error: 0.123453 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11550, train error: 0.124548 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11600, train error: 0.125152 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11650, train error: 0.124484 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11700, train error: 0.125163 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11750, train error: 0.123171 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11800, train error: 0.12117 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11850, train error: 0.12337 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11900, train error: 0.126141 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 11950, train error: 0.124029 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12000, train error: 0.124229 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12050, train error: 0.122898 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12100, train error: 0.125376 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12150, train error: 0.125654 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12200, train error: 0.122275 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12250, train error: 0.12377 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12300, train error: 0.124726 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12350, train error: 0.123587 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12400, train error: 0.126005 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12450, train error: 0.125439 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12500, train error: 0.123447 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12550, train error: 0.126021 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12600, train error: 0.12363 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12650, train error: 0.128074 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12700, train error: 0.123187 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12750, train error: 0.123882 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12800, train error: 0.123351 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12850, train error: 0.126527 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12900, train error: 0.126265 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 12950, train error: 0.123572 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13000, train error: 0.123586 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13050, train error: 0.125281 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13100, train error: 0.124023 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13150, train error: 0.126487 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13200, train error: 0.123153 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13250, train error: 0.125747 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13300, train error: 0.123203 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13350, train error: 0.124818 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13400, train error: 0.125164 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13450, train error: 0.126092 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13500, train error: 0.125467 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13550, train error: 0.128404 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13600, train error: 0.124145 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
step 13650, train error: 0.127462 | batch_size(step.eval(),arg.batch_size): 5842,5842 log_learning_rate: -1.8177617911247557 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6629452/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1329, in save
    self.last_checkpoints, latest_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 745, in update_checkpoint_state
    text_format.MessageToString(ckpt))
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_NN_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_NN_8D_units14_Adam/hp_stid_88/checkpoint.tmp4e4b7d5963c04f27a4ec22fb0183a4d1
