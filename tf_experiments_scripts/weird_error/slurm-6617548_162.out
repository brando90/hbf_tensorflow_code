I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: Tesla K20m
major: 3 minor: 5 memoryClockRate (GHz) 0.7055
pciBusID 0000:24:00.0
Total memory: 4.66GiB
Free memory: 4.59GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla K20m, pci bus id: 0000:24:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617426_141.out', 'slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'slurm-6617426_60.out', 'slurm-6617426_161.out', 'slurm-6617426_66.out', 'slurm-6617426_117.out', 'slurm-6617426_136.out', 'slurm-6617426_54.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'slurm-6617548_84.out', 'pickle_file', 'slurm-6617425_154.out', 'slurm-6617426_181.out', 'slurm-6617426_160.out', '1', 'slurm-6617426_142.out', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'slurm-6617426_65.out', 'slurm-6617426_56.out', 'h_add_data_and_mesh.npz', 'slurm-6617548_83.out', 'slurm-6617548_87.out', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'slurm-6617426_70.out', 'slurm-6617548_78.out', 'slurm-6617426_74.out', 'slurm-6617426_162.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', 'slurm-6617548_86.out', '.swn', 'slurm-6617426_12.out', 'slurm-6617548_80.out', 'slurm-6617425_13.out', 'test_print.py', 'slurm-6617426_123.out', 'slurm-6617426_115.out', 'om_f_8D_single_relu', 'slurm-6617426_116.out', 'slurm-6617426_73.out', 'slurm-6617425_27.out', 'slurm-6617426_53.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'slurm-6617426_134.out', 'slurm-6617426_62.out', 'slurm-6617426_121.out', 'slurm-6617426_122.out', 'slurm-6617426_119.out', 'slurm-6617426_69.out', 'batch_main.py', 'slurm-6617426_127.out', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'slurm-6617548_81.out', 'slurm-6617548_77.out', 'slurm-6617426_68.out', 'os_walk_test', 'slurm-6617426_72.out', 'slurm-6617426_135.out', 'slurm-6617426_159.out', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617426_71.out', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'slurm-6617426_57.out', 'slurm-6617426_143.out', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'slurm-6617426_52.out', 'slurm-6617548_79.out', 'slurm-6617426_58.out', 'output.file', 'slurm-6617426_137.out', 'slurm-6617426_124.out', 'hp_gpu', 'slurm-6617426_144.out', 'slurm-6617425_21.out', 'slurm-6617426_145.out', 'slurm-6617425_167.out', 'my_tf_proj.egg-info', 'slurm-6617426_120.out', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617426_140.out', 'slurm-6617425_3.out', 'slurm-6617548_76.out', 'slurm-6617425_9.out', 'slurm-6617548_88.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'slurm-6617426_163.out', 'extract_results_matplotlib.py', 'slurm-6617548_111.out', '.swp', 'slurm-6617425_162.out', 'slurm-6617548_90.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617426_126.out', 'slurm-6617425_22.out', 'slurm-6617548_85.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'slurm-6617548_82.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'slurm-6617426_139.out', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617548_97.out', 'slurm-6617425_6.out', 'slurm-6617426_63.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617426_64.out', 'slurm-6617426_146.out', 'slurm-6617426_129.out', 'slurm-6617425_19.out', 'slurm-6617426_167.out', 'slurm-6617548_162.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'slurm-6617426_128.out', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617426_67.out', 'slurm-6617426_59.out', 'slurm-6617426_177.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'slurm-6617426_61.out', 'slurm-6617426_118.out', 'slurm-6617426_138.out', 'slurm-6617548_95.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617426_55.out', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
l  2
+++> std mu for inits_C:  [0, 1.828615193981296]
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 13.9963 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 50, train error: 0.16666 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 100, train error: 0.195824 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 150, train error: 0.116051 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 200, train error: 0.109648 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 250, train error: 0.10295 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 300, train error: 0.0984365 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 350, train error: 0.0975789 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 400, train error: 0.0984282 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 450, train error: 0.0985887 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 500, train error: 0.0976973 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 550, train error: 0.0977111 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 600, train error: 0.0983532 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 650, train error: 0.0982439 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 700, train error: 0.0983751 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 750, train error: 0.0981134 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 800, train error: 0.0985709 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 850, train error: 0.098248 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 900, train error: 0.0985524 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 950, train error: 0.0985242 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1000, train error: 0.0988881 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1050, train error: 0.0983293 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1100, train error: 0.0984371 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1150, train error: 0.0989391 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1200, train error: 0.098578 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1250, train error: 0.098318 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1300, train error: 0.0985477 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1350, train error: 0.0988786 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1400, train error: 0.0988778 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1450, train error: 0.0987369 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1500, train error: 0.098767 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1550, train error: 0.0986393 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1600, train error: 0.0988699 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1650, train error: 0.0989104 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1700, train error: 0.0991394 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1750, train error: 0.0990707 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1800, train error: 0.0989731 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1850, train error: 0.0992159 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1900, train error: 0.099262 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 1950, train error: 0.0992865 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2000, train error: 0.0990357 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2050, train error: 0.09926 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2100, train error: 0.0993532 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2150, train error: 0.0991527 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2200, train error: 0.0991504 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2250, train error: 0.0994165 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2300, train error: 0.0994592 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2350, train error: 0.0993278 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2400, train error: 0.0995095 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2450, train error: 0.0996452 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2500, train error: 0.0992891 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2550, train error: 0.0998872 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2600, train error: 0.0998218 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2650, train error: 0.0994194 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2700, train error: 0.0997841 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2750, train error: 0.0994036 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2800, train error: 0.0994428 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2850, train error: 0.0994034 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2900, train error: 0.0996225 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 2950, train error: 0.0994151 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3000, train error: 0.0994165 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3050, train error: 0.0995333 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3100, train error: 0.0991474 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3150, train error: 0.0992364 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3200, train error: 0.0995734 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3250, train error: 0.100199 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3300, train error: 0.0997997 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3350, train error: 0.0997486 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3400, train error: 0.0992778 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3450, train error: 0.0995187 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3500, train error: 0.0995898 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3550, train error: 0.0992726 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3600, train error: 0.0993905 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3650, train error: 0.0990251 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3700, train error: 0.099463 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3750, train error: 0.0992857 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3800, train error: 0.0994308 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3850, train error: 0.0992639 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3900, train error: 0.099535 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 3950, train error: 0.0993729 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4000, train error: 0.0998757 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4050, train error: 0.0993387 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4100, train error: 0.0992291 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4150, train error: 0.0991774 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4200, train error: 0.0994745 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4250, train error: 0.0999249 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4300, train error: 0.0992457 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4350, train error: 0.0991003 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4400, train error: 0.0990655 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4450, train error: 0.0992911 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4500, train error: 0.0994038 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4550, train error: 0.0994741 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4600, train error: 0.0994525 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4650, train error: 0.099333 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4700, train error: 0.0990963 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4750, train error: 0.0990657 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4800, train error: 0.0993406 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4850, train error: 0.0992392 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4900, train error: 0.0993123 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 4950, train error: 0.0993518 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5000, train error: 0.0989027 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5050, train error: 0.0989409 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5100, train error: 0.0993156 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5150, train error: 0.0994546 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5200, train error: 0.0993318 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5250, train error: 0.0991544 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5300, train error: 0.099363 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5350, train error: 0.0991746 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5400, train error: 0.099411 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5450, train error: 0.0993283 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5500, train error: 0.0993803 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5550, train error: 0.0990876 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5600, train error: 0.0993375 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5650, train error: 0.0998001 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5700, train error: 0.0991431 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5750, train error: 0.0990518 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5800, train error: 0.0999544 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5850, train error: 0.0995913 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5900, train error: 0.0993995 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 5950, train error: 0.0991895 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6000, train error: 0.0998178 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6050, train error: 0.100186 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6100, train error: 0.0994918 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6150, train error: 0.0994544 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6200, train error: 0.0996379 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6250, train error: 0.100085 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6300, train error: 0.0999183 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6350, train error: 0.100072 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6400, train error: 0.0995473 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6450, train error: 0.099458 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6500, train error: 0.0999128 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6550, train error: 0.0998758 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6600, train error: 0.0995941 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6650, train error: 0.0998274 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6700, train error: 0.0998682 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6750, train error: 0.099634 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6800, train error: 0.099759 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6850, train error: 0.0993092 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6900, train error: 0.099399 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 6950, train error: 0.0996919 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7000, train error: 0.0995498 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7050, train error: 0.0999208 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7100, train error: 0.0999222 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7150, train error: 0.100249 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7200, train error: 0.100246 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7250, train error: 0.0992022 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7300, train error: 0.0997144 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7350, train error: 0.0998473 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7400, train error: 0.0996169 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7450, train error: 0.0988225 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7500, train error: 0.0989244 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7550, train error: 0.0990858 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7600, train error: 0.0992912 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7650, train error: 0.0988386 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7700, train error: 0.0990052 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7750, train error: 0.099258 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7800, train error: 0.0991496 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7850, train error: 0.09906 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7900, train error: 0.105072 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 7950, train error: 0.0990798 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8000, train error: 0.0992638 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8050, train error: 0.0998391 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8100, train error: 0.0992275 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8150, train error: 0.09847 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8200, train error: 0.0980783 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8250, train error: 0.0979145 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8300, train error: 0.099127 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
step 8350, train error: 0.097608 | batch_size(step.eval(),arg.batch_size): 14294,14294 log_learning_rate: -0.593248638249435 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6629536/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1335, in save
    self.export_meta_graph(meta_graph_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1368, in export_meta_graph
    clear_devices=clear_devices)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1590, in export_meta_graph
    **kwargs)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/meta_graph.py", line 651, in export_scoped_meta_graph
    as_text=as_text)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/training_util.py", line 148, in write_graph
    file_io.atomic_write_string_to_file(path, graph_def.SerializeToString())
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_NN_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_NN_8D_units14_Adam/hp_stid_162/mdl_ckpt.meta.tmp8647dcf329ea4915906e737d5ec6d6b7
