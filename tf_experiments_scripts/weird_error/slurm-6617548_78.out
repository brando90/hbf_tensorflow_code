I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: GeForce GTX TITAN Black
major: 3 minor: 5 memoryClockRate (GHz) 0.98
pciBusID 0000:02:00.0
Total memory: 5.97GiB
Free memory: 5.89GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX TITAN Black, pci bus id: 0000:02:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617426_141.out', 'slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'slurm-6617426_60.out', 'slurm-6617426_161.out', 'slurm-6617426_66.out', 'slurm-6617426_117.out', 'slurm-6617426_136.out', 'slurm-6617426_54.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'slurm-6617548_84.out', 'pickle_file', 'slurm-6617425_154.out', 'slurm-6617426_181.out', 'slurm-6617426_160.out', '1', 'slurm-6617426_142.out', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'slurm-6617426_65.out', 'slurm-6617426_56.out', 'h_add_data_and_mesh.npz', 'slurm-6617548_83.out', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'slurm-6617426_70.out', 'slurm-6617548_78.out', 'slurm-6617426_74.out', 'slurm-6617426_162.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', 'slurm-6617548_86.out', '.swn', 'slurm-6617426_12.out', 'slurm-6617548_80.out', 'slurm-6617425_13.out', 'test_print.py', 'slurm-6617426_123.out', 'slurm-6617426_115.out', 'om_f_8D_single_relu', 'slurm-6617426_116.out', 'slurm-6617426_73.out', 'slurm-6617425_27.out', 'slurm-6617426_53.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'slurm-6617426_134.out', 'slurm-6617426_62.out', 'slurm-6617426_121.out', 'slurm-6617426_122.out', 'slurm-6617426_119.out', 'slurm-6617426_69.out', 'batch_main.py', 'slurm-6617426_127.out', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'slurm-6617548_81.out', 'slurm-6617548_77.out', 'slurm-6617426_68.out', 'os_walk_test', 'slurm-6617426_72.out', 'slurm-6617426_135.out', 'slurm-6617426_159.out', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617426_71.out', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'slurm-6617426_57.out', 'slurm-6617426_143.out', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'slurm-6617426_52.out', 'slurm-6617548_79.out', 'slurm-6617426_58.out', 'output.file', 'slurm-6617426_137.out', 'slurm-6617426_124.out', 'hp_gpu', 'slurm-6617426_144.out', 'slurm-6617425_21.out', 'slurm-6617426_145.out', 'slurm-6617425_167.out', 'my_tf_proj.egg-info', 'slurm-6617426_120.out', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617426_140.out', 'slurm-6617425_3.out', 'slurm-6617548_76.out', 'slurm-6617425_9.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'slurm-6617426_163.out', 'extract_results_matplotlib.py', '.swp', 'slurm-6617425_162.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617426_126.out', 'slurm-6617425_22.out', 'slurm-6617548_85.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'slurm-6617548_82.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'slurm-6617426_139.out', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617425_6.out', 'slurm-6617426_63.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617426_64.out', 'slurm-6617426_146.out', 'slurm-6617426_129.out', 'slurm-6617425_19.out', 'slurm-6617426_167.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'slurm-6617426_128.out', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617426_67.out', 'slurm-6617426_59.out', 'slurm-6617426_177.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'slurm-6617426_61.out', 'slurm-6617426_118.out', 'slurm-6617426_138.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617426_55.out', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
l  2
+++> std mu for inits_C:  [0, 1.9546828347897904]
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 6.7043 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 50, train error: 5.07584 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 100, train error: 3.90087 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 150, train error: 3.1196 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 200, train error: 2.6207 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 250, train error: 2.28554 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 300, train error: 2.03528 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 350, train error: 1.83247 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 400, train error: 1.6597 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 450, train error: 1.50482 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 500, train error: 1.36046 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 550, train error: 1.22565 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 600, train error: 1.10278 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 650, train error: 0.992621 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 700, train error: 0.895286 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 750, train error: 0.809029 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 800, train error: 0.731965 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 850, train error: 0.663046 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 900, train error: 0.601339 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 950, train error: 0.546213 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1000, train error: 0.49711 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1050, train error: 0.453715 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1100, train error: 0.415389 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1150, train error: 0.38182 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1200, train error: 0.352661 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1250, train error: 0.327382 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1300, train error: 0.305508 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1350, train error: 0.286619 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1400, train error: 0.270387 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1450, train error: 0.256298 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1500, train error: 0.244078 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1550, train error: 0.233511 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1600, train error: 0.224309 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1650, train error: 0.21644 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1700, train error: 0.209481 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1750, train error: 0.203285 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1800, train error: 0.197829 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1850, train error: 0.192985 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1900, train error: 0.188694 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 1950, train error: 0.184804 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2000, train error: 0.181168 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2050, train error: 0.177766 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2100, train error: 0.17464 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2150, train error: 0.171712 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2200, train error: 0.169008 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2250, train error: 0.166487 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2300, train error: 0.164001 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2350, train error: 0.161557 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2400, train error: 0.159259 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2450, train error: 0.156979 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2500, train error: 0.154702 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2550, train error: 0.152419 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2600, train error: 0.150368 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2650, train error: 0.148426 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2700, train error: 0.146457 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2750, train error: 0.144542 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2800, train error: 0.142588 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2850, train error: 0.14065 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2900, train error: 0.138861 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 2950, train error: 0.13706 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3000, train error: 0.135415 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3050, train error: 0.13387 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3100, train error: 0.132316 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3150, train error: 0.130638 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3200, train error: 0.129006 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3250, train error: 0.127613 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3300, train error: 0.126131 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3350, train error: 0.12457 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3400, train error: 0.123294 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3450, train error: 0.122232 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3500, train error: 0.121099 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3550, train error: 0.119845 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3600, train error: 0.118674 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3650, train error: 0.117605 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3700, train error: 0.116565 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3750, train error: 0.115615 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3800, train error: 0.114792 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3850, train error: 0.114119 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3900, train error: 0.11335 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 3950, train error: 0.112486 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4000, train error: 0.111882 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4050, train error: 0.111335 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4100, train error: 0.110622 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4150, train error: 0.110177 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4200, train error: 0.109523 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4250, train error: 0.10922 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4300, train error: 0.108709 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4350, train error: 0.108063 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4400, train error: 0.107686 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4450, train error: 0.107212 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4500, train error: 0.106774 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4550, train error: 0.10634 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4600, train error: 0.10606 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4650, train error: 0.105811 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4700, train error: 0.105407 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4750, train error: 0.105184 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4800, train error: 0.104931 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4850, train error: 0.104617 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4900, train error: 0.104274 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 4950, train error: 0.103847 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5000, train error: 0.103925 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5050, train error: 0.103589 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5100, train error: 0.103095 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5150, train error: 0.103129 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5200, train error: 0.103173 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5250, train error: 0.10288 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5300, train error: 0.102641 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5350, train error: 0.102459 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5400, train error: 0.102476 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5450, train error: 0.10249 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5500, train error: 0.102206 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5550, train error: 0.102184 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5600, train error: 0.102235 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5650, train error: 0.101894 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5700, train error: 0.101797 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5750, train error: 0.101925 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5800, train error: 0.101857 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5850, train error: 0.101714 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5900, train error: 0.10195 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 5950, train error: 0.101879 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6000, train error: 0.101616 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6050, train error: 0.101715 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6100, train error: 0.101834 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6150, train error: 0.101749 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6200, train error: 0.101757 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6250, train error: 0.101624 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6300, train error: 0.101624 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6350, train error: 0.101276 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6400, train error: 0.1014 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6450, train error: 0.101642 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6500, train error: 0.101342 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6550, train error: 0.101083 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6600, train error: 0.101293 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6650, train error: 0.101219 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6700, train error: 0.101186 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6750, train error: 0.101221 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6800, train error: 0.101176 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6850, train error: 0.101442 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6900, train error: 0.101288 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 6950, train error: 0.101191 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7000, train error: 0.101042 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7050, train error: 0.101513 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7100, train error: 0.101316 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7150, train error: 0.101118 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7200, train error: 0.101312 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7250, train error: 0.101148 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7300, train error: 0.101109 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7350, train error: 0.101168 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7400, train error: 0.101285 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7450, train error: 0.101241 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7500, train error: 0.101284 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7550, train error: 0.101112 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7600, train error: 0.101113 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7650, train error: 0.101294 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7700, train error: 0.101124 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7750, train error: 0.101232 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7800, train error: 0.101153 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7850, train error: 0.10107 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7900, train error: 0.101161 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 7950, train error: 0.101164 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8000, train error: 0.101273 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8050, train error: 0.101133 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8100, train error: 0.101278 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8150, train error: 0.101228 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8200, train error: 0.101232 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8250, train error: 0.101319 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8300, train error: 0.101435 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8350, train error: 0.10149 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8400, train error: 0.101406 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8450, train error: 0.10125 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8500, train error: 0.101318 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8550, train error: 0.101453 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8600, train error: 0.101346 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8650, train error: 0.10132 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8700, train error: 0.101405 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8750, train error: 0.101374 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8800, train error: 0.101319 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8850, train error: 0.101428 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8900, train error: 0.101417 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 8950, train error: 0.101348 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9000, train error: 0.101431 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9050, train error: 0.101457 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9100, train error: 0.101379 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9150, train error: 0.10133 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9200, train error: 0.101373 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9250, train error: 0.101439 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9300, train error: 0.101346 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9350, train error: 0.101323 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9400, train error: 0.101302 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9450, train error: 0.101481 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9500, train error: 0.101244 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9550, train error: 0.101211 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9600, train error: 0.101382 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9650, train error: 0.10126 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9700, train error: 0.101321 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9750, train error: 0.101318 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9800, train error: 0.101342 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9850, train error: 0.101247 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9900, train error: 0.10122 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 9950, train error: 0.101338 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10000, train error: 0.101288 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10050, train error: 0.101311 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10100, train error: 0.101533 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10150, train error: 0.101316 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10200, train error: 0.101265 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10250, train error: 0.101401 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10300, train error: 0.10139 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10350, train error: 0.101365 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10400, train error: 0.101588 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10450, train error: 0.1016 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10500, train error: 0.101397 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10550, train error: 0.101471 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10600, train error: 0.101603 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10650, train error: 0.101542 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10700, train error: 0.101641 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10750, train error: 0.101763 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10800, train error: 0.101456 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10850, train error: 0.101623 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10900, train error: 0.101789 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 10950, train error: 0.101584 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11000, train error: 0.101546 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11050, train error: 0.101701 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11100, train error: 0.101569 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11150, train error: 0.101633 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11200, train error: 0.101644 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11250, train error: 0.101656 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11300, train error: 0.10141 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11350, train error: 0.101624 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11400, train error: 0.10147 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11450, train error: 0.101288 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11500, train error: 0.10146 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11550, train error: 0.101688 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11600, train error: 0.101648 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11650, train error: 0.101575 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11700, train error: 0.101481 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11750, train error: 0.101368 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11800, train error: 0.101663 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11850, train error: 0.101439 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11900, train error: 0.101309 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 11950, train error: 0.101516 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12000, train error: 0.101351 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12050, train error: 0.101312 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12100, train error: 0.101418 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12150, train error: 0.101301 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12200, train error: 0.101423 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12250, train error: 0.101659 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12300, train error: 0.10143 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12350, train error: 0.101405 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12400, train error: 0.101291 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12450, train error: 0.101396 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12500, train error: 0.101329 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12550, train error: 0.101152 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12600, train error: 0.101429 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12650, train error: 0.101151 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12700, train error: 0.101153 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12750, train error: 0.101308 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12800, train error: 0.101292 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12850, train error: 0.101149 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12900, train error: 0.101376 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 12950, train error: 0.101137 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13000, train error: 0.101295 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13050, train error: 0.101109 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13100, train error: 0.101318 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13150, train error: 0.101217 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13200, train error: 0.101123 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13250, train error: 0.101245 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13300, train error: 0.101186 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13350, train error: 0.101102 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13400, train error: 0.101237 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13450, train error: 0.10108 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13500, train error: 0.10116 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13550, train error: 0.101348 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13600, train error: 0.101376 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13650, train error: 0.101181 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13700, train error: 0.101105 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13750, train error: 0.101095 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13800, train error: 0.100904 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13850, train error: 0.101033 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13900, train error: 0.101247 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 13950, train error: 0.101087 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14000, train error: 0.10114 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14050, train error: 0.101183 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14100, train error: 0.101232 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14150, train error: 0.101189 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14200, train error: 0.101223 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14250, train error: 0.101335 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14300, train error: 0.10111 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14350, train error: 0.10094 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14400, train error: 0.101144 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14450, train error: 0.101174 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14500, train error: 0.10116 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14550, train error: 0.101178 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14600, train error: 0.101206 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14650, train error: 0.101127 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14700, train error: 0.101065 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14750, train error: 0.101193 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14800, train error: 0.101276 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14850, train error: 0.101156 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14900, train error: 0.101115 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 14950, train error: 0.101347 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15000, train error: 0.101423 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15050, train error: 0.101241 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15100, train error: 0.10115 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15150, train error: 0.101212 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15200, train error: 0.101142 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15250, train error: 0.101104 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15300, train error: 0.101154 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15350, train error: 0.101287 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15400, train error: 0.101247 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15450, train error: 0.101241 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15500, train error: 0.101306 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15550, train error: 0.101324 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15600, train error: 0.101304 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15650, train error: 0.101213 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15700, train error: 0.101261 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15750, train error: 0.10126 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15800, train error: 0.101193 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15850, train error: 0.101255 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15900, train error: 0.101343 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 15950, train error: 0.101288 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16000, train error: 0.101284 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16050, train error: 0.101258 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16100, train error: 0.101265 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16150, train error: 0.101257 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16200, train error: 0.101293 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16250, train error: 0.101239 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16300, train error: 0.101328 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16350, train error: 0.101405 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16400, train error: 0.10144 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16450, train error: 0.101349 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16500, train error: 0.101306 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16550, train error: 0.101308 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16600, train error: 0.101216 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16650, train error: 0.101236 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16700, train error: 0.10124 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16750, train error: 0.101318 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16800, train error: 0.101341 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16850, train error: 0.101367 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16900, train error: 0.101334 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 16950, train error: 0.101353 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17000, train error: 0.101454 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17050, train error: 0.101318 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17100, train error: 0.101257 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17150, train error: 0.101237 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17200, train error: 0.101359 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17250, train error: 0.101446 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17300, train error: 0.101445 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17350, train error: 0.101433 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17400, train error: 0.101426 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17450, train error: 0.101533 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17500, train error: 0.101457 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
step 17550, train error: 0.101308 | batch_size(step.eval(),arg.batch_size): 3380,3380 log_learning_rate: -3.518954255152796 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6628820/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1335, in save
    self.export_meta_graph(meta_graph_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1368, in export_meta_graph
    clear_devices=clear_devices)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1590, in export_meta_graph
    **kwargs)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/meta_graph.py", line 651, in export_scoped_meta_graph
    as_text=as_text)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/training_util.py", line 148, in write_graph
    file_io.atomic_write_string_to_file(path, graph_def.SerializeToString())
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_NN_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_NN_8D_units14_Adam/hp_stid_78/mdl_ckpt.meta.tmp0a2e7c6d9ab646189c775cce2b570dca
