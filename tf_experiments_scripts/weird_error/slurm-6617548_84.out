I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: GeForce GTX TITAN X
major: 5 minor: 2 memoryClockRate (GHz) 1.076
pciBusID 0000:81:00.0
Total memory: 11.95GiB
Free memory: 11.84GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: GeForce GTX TITAN X, pci bus id: 0000:81:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617426_141.out', 'slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'slurm-6617426_60.out', 'slurm-6617426_161.out', 'slurm-6617426_66.out', 'slurm-6617426_117.out', 'slurm-6617426_136.out', 'slurm-6617426_54.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'slurm-6617548_84.out', 'pickle_file', 'slurm-6617425_154.out', 'slurm-6617426_181.out', 'slurm-6617426_160.out', '1', 'slurm-6617426_142.out', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'slurm-6617426_65.out', 'slurm-6617426_56.out', 'h_add_data_and_mesh.npz', 'slurm-6617548_83.out', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'slurm-6617426_70.out', 'slurm-6617548_78.out', 'slurm-6617426_74.out', 'slurm-6617426_162.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', 'slurm-6617548_86.out', '.swn', 'slurm-6617426_12.out', 'slurm-6617548_80.out', 'slurm-6617425_13.out', 'test_print.py', 'slurm-6617426_123.out', 'slurm-6617426_115.out', 'om_f_8D_single_relu', 'slurm-6617426_116.out', 'slurm-6617426_73.out', 'slurm-6617425_27.out', 'slurm-6617426_53.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'slurm-6617426_134.out', 'slurm-6617426_62.out', 'slurm-6617426_121.out', 'slurm-6617426_122.out', 'slurm-6617426_119.out', 'slurm-6617426_69.out', 'batch_main.py', 'slurm-6617426_127.out', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'slurm-6617548_81.out', 'slurm-6617548_77.out', 'slurm-6617426_68.out', 'os_walk_test', 'slurm-6617426_72.out', 'slurm-6617426_135.out', 'slurm-6617426_159.out', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617426_71.out', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'slurm-6617426_57.out', 'slurm-6617426_143.out', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'slurm-6617426_52.out', 'slurm-6617548_79.out', 'slurm-6617426_58.out', 'output.file', 'slurm-6617426_137.out', 'slurm-6617426_124.out', 'hp_gpu', 'slurm-6617426_144.out', 'slurm-6617425_21.out', 'slurm-6617426_145.out', 'slurm-6617425_167.out', 'my_tf_proj.egg-info', 'slurm-6617426_120.out', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617426_140.out', 'slurm-6617425_3.out', 'slurm-6617548_76.out', 'slurm-6617425_9.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'slurm-6617426_163.out', 'extract_results_matplotlib.py', '.swp', 'slurm-6617425_162.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617426_126.out', 'slurm-6617425_22.out', 'slurm-6617548_85.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'slurm-6617548_82.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'slurm-6617426_139.out', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617425_6.out', 'slurm-6617426_63.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617426_64.out', 'slurm-6617426_146.out', 'slurm-6617426_129.out', 'slurm-6617425_19.out', 'slurm-6617426_167.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'slurm-6617426_128.out', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617426_67.out', 'slurm-6617426_59.out', 'slurm-6617426_177.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'slurm-6617426_61.out', 'slurm-6617426_118.out', 'slurm-6617426_138.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617426_55.out', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
l  2
+++> std mu for inits_C:  [0, 1.01564029982578]
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 7.00294 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 50, train error: 3.45166 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 100, train error: 1.80702 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 150, train error: 1.1229 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 200, train error: 0.719987 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 250, train error: 0.461269 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 300, train error: 0.3306 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 350, train error: 0.274809 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 400, train error: 0.247003 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 450, train error: 0.22593 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 500, train error: 0.206656 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 550, train error: 0.191364 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 600, train error: 0.180482 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 650, train error: 0.17122 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 700, train error: 0.162404 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 750, train error: 0.15622 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 800, train error: 0.15221 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 850, train error: 0.149143 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 900, train error: 0.147072 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 950, train error: 0.145291 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1000, train error: 0.143544 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1050, train error: 0.141637 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1100, train error: 0.139447 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1150, train error: 0.137548 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1200, train error: 0.135961 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1250, train error: 0.13491 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1300, train error: 0.134184 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1350, train error: 0.133901 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1400, train error: 0.133262 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1450, train error: 0.132281 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1500, train error: 0.131183 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1550, train error: 0.130155 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1600, train error: 0.129162 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1650, train error: 0.128211 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1700, train error: 0.127511 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1750, train error: 0.126316 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1800, train error: 0.125267 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1850, train error: 0.124564 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1900, train error: 0.124473 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 1950, train error: 0.124168 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2000, train error: 0.122685 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2050, train error: 0.12137 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2100, train error: 0.120527 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2150, train error: 0.120503 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2200, train error: 0.120254 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2250, train error: 0.120123 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2300, train error: 0.119521 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2350, train error: 0.119686 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2400, train error: 0.1199 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2450, train error: 0.119607 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2500, train error: 0.118605 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2550, train error: 0.119248 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2600, train error: 0.119948 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2650, train error: 0.119544 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2700, train error: 0.119007 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2750, train error: 0.118839 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2800, train error: 0.118593 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2850, train error: 0.119045 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2900, train error: 0.11894 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 2950, train error: 0.118069 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3000, train error: 0.118682 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3050, train error: 0.11873 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3100, train error: 0.118284 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3150, train error: 0.118941 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3200, train error: 0.118594 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3250, train error: 0.118816 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3300, train error: 0.119283 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3350, train error: 0.119442 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3400, train error: 0.120115 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3450, train error: 0.12016 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3500, train error: 0.120566 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3550, train error: 0.120035 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3600, train error: 0.11874 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3650, train error: 0.118632 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3700, train error: 0.120091 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3750, train error: 0.119858 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3800, train error: 0.119117 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3850, train error: 0.119932 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3900, train error: 0.119269 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 3950, train error: 0.119558 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4000, train error: 0.12011 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4050, train error: 0.121157 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4100, train error: 0.120306 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4150, train error: 0.119698 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4200, train error: 0.119189 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4250, train error: 0.120743 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4300, train error: 0.120974 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4350, train error: 0.120558 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4400, train error: 0.120166 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4450, train error: 0.120407 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4500, train error: 0.120423 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4550, train error: 0.120701 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4600, train error: 0.121991 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4650, train error: 0.120887 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4700, train error: 0.121264 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4750, train error: 0.12172 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4800, train error: 0.121115 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4850, train error: 0.122618 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4900, train error: 0.121825 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 4950, train error: 0.123161 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5000, train error: 0.121984 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5050, train error: 0.122563 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5100, train error: 0.123059 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5150, train error: 0.123001 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5200, train error: 0.123883 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5250, train error: 0.123416 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5300, train error: 0.122974 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5350, train error: 0.123871 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5400, train error: 0.123385 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5450, train error: 0.123718 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5500, train error: 0.123498 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5550, train error: 0.12453 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5600, train error: 0.125287 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5650, train error: 0.126089 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5700, train error: 0.125141 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5750, train error: 0.125975 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5800, train error: 0.125506 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5850, train error: 0.127076 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5900, train error: 0.126595 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 5950, train error: 0.126215 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6000, train error: 0.126499 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6050, train error: 0.126072 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6100, train error: 0.127075 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6150, train error: 0.127409 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6200, train error: 0.127507 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6250, train error: 0.127443 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6300, train error: 0.128268 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6350, train error: 0.128964 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6400, train error: 0.128645 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6450, train error: 0.129232 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6500, train error: 0.128844 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6550, train error: 0.12991 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6600, train error: 0.129558 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6650, train error: 0.129487 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6700, train error: 0.128477 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6750, train error: 0.130753 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6800, train error: 0.130789 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6850, train error: 0.131106 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6900, train error: 0.129278 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 6950, train error: 0.129839 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7000, train error: 0.13055 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7050, train error: 0.129978 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7100, train error: 0.130354 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7150, train error: 0.13059 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7200, train error: 0.129356 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7250, train error: 0.131839 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7300, train error: 0.131374 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7350, train error: 0.132913 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7400, train error: 0.131927 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7450, train error: 0.131184 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7500, train error: 0.132742 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7550, train error: 0.131258 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7600, train error: 0.133157 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7650, train error: 0.132329 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7700, train error: 0.133104 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7750, train error: 0.133611 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7800, train error: 0.134868 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7850, train error: 0.135225 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7900, train error: 0.134558 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 7950, train error: 0.13283 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8000, train error: 0.135174 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8050, train error: 0.133315 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8100, train error: 0.136733 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8150, train error: 0.132596 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8200, train error: 0.137166 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8250, train error: 0.132402 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8300, train error: 0.13668 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8350, train error: 0.131887 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8400, train error: 0.136895 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8450, train error: 0.133267 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8500, train error: 0.134973 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8550, train error: 0.132694 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8600, train error: 0.135334 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8650, train error: 0.134486 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8700, train error: 0.134475 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8750, train error: 0.134546 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8800, train error: 0.135845 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8850, train error: 0.134143 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8900, train error: 0.135365 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 8950, train error: 0.134906 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9000, train error: 0.138134 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9050, train error: 0.135537 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9100, train error: 0.136168 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9150, train error: 0.135163 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9200, train error: 0.135323 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9250, train error: 0.135015 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9300, train error: 0.134923 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9350, train error: 0.134958 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9400, train error: 0.13516 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9450, train error: 0.135449 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9500, train error: 0.135673 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9550, train error: 0.13563 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9600, train error: 0.135372 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9650, train error: 0.135564 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9700, train error: 0.135348 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9750, train error: 0.135298 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9800, train error: 0.135214 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9850, train error: 0.135313 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9900, train error: 0.135298 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 9950, train error: 0.135263 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10000, train error: 0.135437 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10050, train error: 0.135503 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10100, train error: 0.135546 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10150, train error: 0.135388 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10200, train error: 0.135624 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10250, train error: 0.135709 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10300, train error: 0.135549 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10350, train error: 0.135143 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10400, train error: 0.134948 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10450, train error: 0.134666 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10500, train error: 0.134756 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10550, train error: 0.134882 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10600, train error: 0.134959 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10650, train error: 0.135186 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10700, train error: 0.135435 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10750, train error: 0.135223 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10800, train error: 0.134805 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10850, train error: 0.134774 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10900, train error: 0.135036 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 10950, train error: 0.134723 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11000, train error: 0.134561 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11050, train error: 0.134637 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11100, train error: 0.135084 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11150, train error: 0.135273 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11200, train error: 0.135599 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11250, train error: 0.135667 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11300, train error: 0.13537 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11350, train error: 0.135221 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11400, train error: 0.135546 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11450, train error: 0.135596 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11500, train error: 0.135307 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11550, train error: 0.1352 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11600, train error: 0.135251 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11650, train error: 0.135434 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11700, train error: 0.135458 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11750, train error: 0.13578 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11800, train error: 0.135803 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11850, train error: 0.135359 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11900, train error: 0.135386 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 11950, train error: 0.135222 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12000, train error: 0.135247 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12050, train error: 0.135389 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12100, train error: 0.135459 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12150, train error: 0.135565 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12200, train error: 0.135545 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12250, train error: 0.135664 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12300, train error: 0.135595 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12350, train error: 0.13574 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12400, train error: 0.136097 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12450, train error: 0.136062 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12500, train error: 0.135892 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12550, train error: 0.136305 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12600, train error: 0.136248 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12650, train error: 0.136262 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12700, train error: 0.136317 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12750, train error: 0.136043 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12800, train error: 0.135604 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12850, train error: 0.135674 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12900, train error: 0.135472 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 12950, train error: 0.1353 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13000, train error: 0.135747 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13050, train error: 0.135943 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13100, train error: 0.135951 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13150, train error: 0.135692 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13200, train error: 0.135222 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13250, train error: 0.135104 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13300, train error: 0.135061 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13350, train error: 0.135351 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13400, train error: 0.13541 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13450, train error: 0.13556 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13500, train error: 0.135351 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13550, train error: 0.135602 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13600, train error: 0.135522 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13650, train error: 0.135091 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13700, train error: 0.135268 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13750, train error: 0.135426 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13800, train error: 0.135574 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13850, train error: 0.135531 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13900, train error: 0.135309 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 13950, train error: 0.135281 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14000, train error: 0.135286 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14050, train error: 0.135432 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14100, train error: 0.136056 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14150, train error: 0.136358 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14200, train error: 0.136251 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14250, train error: 0.135992 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14300, train error: 0.135817 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14350, train error: 0.135735 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14400, train error: 0.135689 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14450, train error: 0.135593 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14500, train error: 0.135614 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14550, train error: 0.135886 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14600, train error: 0.135992 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14650, train error: 0.136161 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14700, train error: 0.136279 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14750, train error: 0.13607 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14800, train error: 0.135832 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14850, train error: 0.135844 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14900, train error: 0.135955 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 14950, train error: 0.135966 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15000, train error: 0.136167 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15050, train error: 0.136364 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15100, train error: 0.136273 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15150, train error: 0.136247 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15200, train error: 0.136187 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15250, train error: 0.13611 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15300, train error: 0.136385 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15350, train error: 0.136679 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15400, train error: 0.13642 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15450, train error: 0.136475 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15500, train error: 0.136808 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15550, train error: 0.136636 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15600, train error: 0.136502 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15650, train error: 0.13678 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15700, train error: 0.136613 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15750, train error: 0.136526 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15800, train error: 0.136659 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15850, train error: 0.136525 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15900, train error: 0.136655 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 15950, train error: 0.136869 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16000, train error: 0.136709 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16050, train error: 0.136296 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16100, train error: 0.136085 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16150, train error: 0.135984 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16200, train error: 0.135805 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16250, train error: 0.135708 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16300, train error: 0.135928 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16350, train error: 0.13622 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16400, train error: 0.136221 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16450, train error: 0.136118 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16500, train error: 0.136377 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16550, train error: 0.13693 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16600, train error: 0.136725 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16650, train error: 0.136583 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16700, train error: 0.136592 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16750, train error: 0.136867 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16800, train error: 0.137197 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16850, train error: 0.136975 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16900, train error: 0.136533 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 16950, train error: 0.136291 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17000, train error: 0.136126 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17050, train error: 0.136263 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17100, train error: 0.136331 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17150, train error: 0.136224 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17200, train error: 0.135989 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17250, train error: 0.135673 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17300, train error: 0.135767 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17350, train error: 0.136057 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17400, train error: 0.135901 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17450, train error: 0.135948 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17500, train error: 0.135836 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17550, train error: 0.135722 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17600, train error: 0.135954 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17650, train error: 0.136356 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17700, train error: 0.136554 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17750, train error: 0.136211 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17800, train error: 0.136164 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17850, train error: 0.136717 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17900, train error: 0.137239 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 17950, train error: 0.137249 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18000, train error: 0.137234 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18050, train error: 0.137183 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18100, train error: 0.137267 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18150, train error: 0.137315 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18200, train error: 0.137258 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18250, train error: 0.13694 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18300, train error: 0.136927 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18350, train error: 0.136868 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18400, train error: 0.136809 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18450, train error: 0.136779 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18500, train error: 0.136747 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18550, train error: 0.13678 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18600, train error: 0.136838 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18650, train error: 0.136905 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18700, train error: 0.136905 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18750, train error: 0.136891 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18800, train error: 0.136858 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18850, train error: 0.13686 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18900, train error: 0.136847 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 18950, train error: 0.136811 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19000, train error: 0.136777 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19050, train error: 0.136749 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19100, train error: 0.136717 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19150, train error: 0.136697 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19200, train error: 0.136652 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19250, train error: 0.13665 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19300, train error: 0.136624 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19350, train error: 0.136607 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19400, train error: 0.136687 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19450, train error: 0.136738 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19500, train error: 0.136783 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19550, train error: 0.136816 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19600, train error: 0.136763 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19650, train error: 0.1367 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19700, train error: 0.136691 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19750, train error: 0.13665 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19800, train error: 0.136647 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19850, train error: 0.13666 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19900, train error: 0.136645 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 19950, train error: 0.136603 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20000, train error: 0.136603 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20050, train error: 0.136627 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20100, train error: 0.136674 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20150, train error: 0.136724 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20200, train error: 0.136799 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20250, train error: 0.136835 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20300, train error: 0.136826 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20350, train error: 0.136859 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20400, train error: 0.136861 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20450, train error: 0.136857 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20500, train error: 0.136867 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20550, train error: 0.136868 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20600, train error: 0.136856 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20650, train error: 0.136829 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20700, train error: 0.136818 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20750, train error: 0.136776 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20800, train error: 0.136752 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20850, train error: 0.136745 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20900, train error: 0.136765 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 20950, train error: 0.136791 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21000, train error: 0.136819 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21050, train error: 0.136813 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21100, train error: 0.136777 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21150, train error: 0.136782 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21200, train error: 0.136767 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21250, train error: 0.136706 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21300, train error: 0.136681 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21350, train error: 0.136679 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21400, train error: 0.136669 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21450, train error: 0.136689 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21500, train error: 0.136707 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21550, train error: 0.136742 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21600, train error: 0.136775 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21650, train error: 0.13678 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21700, train error: 0.136793 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21750, train error: 0.136804 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21800, train error: 0.136794 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21850, train error: 0.136731 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21900, train error: 0.136732 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 21950, train error: 0.136763 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22000, train error: 0.136799 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22050, train error: 0.136791 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22100, train error: 0.136757 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22150, train error: 0.136761 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22200, train error: 0.136781 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22250, train error: 0.136744 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22300, train error: 0.136723 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22350, train error: 0.136737 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22400, train error: 0.136809 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22450, train error: 0.136891 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22500, train error: 0.136869 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22550, train error: 0.136816 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22600, train error: 0.136741 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22650, train error: 0.136713 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22700, train error: 0.136658 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22750, train error: 0.136658 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22800, train error: 0.136654 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22850, train error: 0.136615 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22900, train error: 0.136644 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 22950, train error: 0.136652 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23000, train error: 0.136666 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23050, train error: 0.13668 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23100, train error: 0.136707 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23150, train error: 0.136676 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23200, train error: 0.136717 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23250, train error: 0.136696 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23300, train error: 0.136661 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23350, train error: 0.136599 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23400, train error: 0.136551 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23450, train error: 0.136547 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23500, train error: 0.136556 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23550, train error: 0.13657 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23600, train error: 0.136606 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23650, train error: 0.136631 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23700, train error: 0.136613 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23750, train error: 0.136605 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23800, train error: 0.136597 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
step 23850, train error: 0.13659 | batch_size(step.eval(),arg.batch_size): 667,667 log_learning_rate: -2.983782463360273 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6628826/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1329, in save
    self.last_checkpoints, latest_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 745, in update_checkpoint_state
    text_format.MessageToString(ckpt))
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_NN_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_NN_8D_units14_Adam/hp_stid_84/checkpoint.tmpe27ac4416a6b45d695f8fa9548f793e0
