I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: Tesla K20m
major: 3 minor: 5 memoryClockRate (GHz) 0.7055
pciBusID 0000:08:00.0
Total memory: 4.66GiB
Free memory: 4.59GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla K20m, pci bus id: 0000:08:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'slurm-6617426_60.out', 'slurm-6617426_66.out', 'slurm-6617426_54.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'pickle_file', 'slurm-6617425_154.out', '1', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'slurm-6617426_65.out', 'slurm-6617426_56.out', 'h_add_data_and_mesh.npz', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'slurm-6617426_70.out', 'slurm-6617426_74.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', '.swn', 'slurm-6617426_12.out', 'slurm-6617425_13.out', 'test_print.py', 'om_f_8D_single_relu', 'slurm-6617426_73.out', 'slurm-6617425_27.out', 'slurm-6617426_53.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'slurm-6617426_62.out', 'slurm-6617426_69.out', 'batch_main.py', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'slurm-6617426_68.out', 'os_walk_test', 'slurm-6617426_72.out', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617426_71.out', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'slurm-6617426_57.out', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'slurm-6617426_52.out', 'slurm-6617426_58.out', 'output.file', 'hp_gpu', 'slurm-6617425_21.out', 'slurm-6617425_167.out', 'my_tf_proj.egg-info', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617425_3.out', 'slurm-6617425_9.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'extract_results_matplotlib.py', '.swp', 'slurm-6617425_162.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617425_22.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617425_6.out', 'slurm-6617426_63.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617426_64.out', 'slurm-6617425_19.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617426_67.out', 'slurm-6617426_59.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'slurm-6617426_61.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617426_55.out', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 0.115286 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 50, train error: 0.0991832 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 100, train error: 0.0981352 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 150, train error: 0.0975359 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 200, train error: 0.0973457 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 250, train error: 0.0974118 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 300, train error: 0.0974069 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 350, train error: 0.0975439 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 400, train error: 0.0975652 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 450, train error: 0.097479 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 500, train error: 0.0975027 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 550, train error: 0.0975702 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 600, train error: 0.0977147 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 650, train error: 0.0976877 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 700, train error: 0.0978095 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 750, train error: 0.0980258 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 800, train error: 0.0984412 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 850, train error: 0.0984653 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 900, train error: 0.0984137 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 950, train error: 0.09896 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1000, train error: 0.0986411 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1050, train error: 0.0986649 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1100, train error: 0.098866 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1150, train error: 0.0992125 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1200, train error: 0.0997361 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1250, train error: 0.100305 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1300, train error: 0.10057 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1350, train error: 0.1 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1400, train error: 0.101318 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1450, train error: 0.101468 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1500, train error: 0.100914 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1550, train error: 0.101893 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1600, train error: 0.103332 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1650, train error: 0.104458 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1700, train error: 0.104012 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1750, train error: 0.104965 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1800, train error: 0.104577 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1850, train error: 0.105851 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1900, train error: 0.105701 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 1950, train error: 0.105267 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2000, train error: 0.106463 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2050, train error: 0.106903 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2100, train error: 0.107653 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2150, train error: 0.106771 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2200, train error: 0.106783 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2250, train error: 0.10716 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2300, train error: 0.105647 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2350, train error: 0.105226 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2400, train error: 0.106075 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2450, train error: 0.105476 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2500, train error: 0.107124 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2550, train error: 0.105488 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2600, train error: 0.104614 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2650, train error: 0.104899 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2700, train error: 0.105646 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2750, train error: 0.104352 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2800, train error: 0.105591 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2850, train error: 0.104751 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2900, train error: 0.104619 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 2950, train error: 0.105483 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3000, train error: 0.106533 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3050, train error: 0.105727 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3100, train error: 0.105774 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3150, train error: 0.107394 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3200, train error: 0.107401 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3250, train error: 0.106775 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3300, train error: 0.105141 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3350, train error: 0.106336 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3400, train error: 0.105773 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3450, train error: 0.105545 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3500, train error: 0.105807 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3550, train error: 0.105718 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3600, train error: 0.106231 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3650, train error: 0.106016 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3700, train error: 0.105556 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3750, train error: 0.104373 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3800, train error: 0.104903 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3850, train error: 0.105512 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3900, train error: 0.105225 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 3950, train error: 0.106018 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4000, train error: 0.106364 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4050, train error: 0.106602 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4100, train error: 0.106165 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4150, train error: 0.105789 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4200, train error: 0.105783 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4250, train error: 0.105979 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4300, train error: 0.106658 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4350, train error: 0.106877 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4400, train error: 0.10741 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4450, train error: 0.107068 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4500, train error: 0.106189 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4550, train error: 0.1067 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4600, train error: 0.106838 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4650, train error: 0.10584 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4700, train error: 0.105593 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4750, train error: 0.106116 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4800, train error: 0.106417 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4850, train error: 0.107345 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4900, train error: 0.106791 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 4950, train error: 0.107058 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5000, train error: 0.107181 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5050, train error: 0.106553 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5100, train error: 0.106652 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5150, train error: 0.107593 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5200, train error: 0.107543 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5250, train error: 0.106443 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5300, train error: 0.106608 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5350, train error: 0.107281 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5400, train error: 0.106907 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5450, train error: 0.107586 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5500, train error: 0.106844 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5550, train error: 0.107459 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5600, train error: 0.106888 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5650, train error: 0.106781 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5700, train error: 0.10702 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5750, train error: 0.106448 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5800, train error: 0.105442 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5850, train error: 0.106185 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5900, train error: 0.106114 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 5950, train error: 0.107261 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6000, train error: 0.107075 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6050, train error: 0.106249 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6100, train error: 0.106952 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6150, train error: 0.106398 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6200, train error: 0.106109 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6250, train error: 0.106521 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6300, train error: 0.106985 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6350, train error: 0.107692 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6400, train error: 0.106664 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6450, train error: 0.108127 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6500, train error: 0.10798 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6550, train error: 0.107532 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6600, train error: 0.107313 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6650, train error: 0.107581 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6700, train error: 0.108473 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6750, train error: 0.108422 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6800, train error: 0.109276 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6850, train error: 0.107518 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6900, train error: 0.107753 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 6950, train error: 0.10761 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7000, train error: 0.108875 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7050, train error: 0.108774 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7100, train error: 0.108769 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7150, train error: 0.108084 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7200, train error: 0.108606 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7250, train error: 0.107638 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7300, train error: 0.107673 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7350, train error: 0.107608 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7400, train error: 0.108123 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7450, train error: 0.107335 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7500, train error: 0.107154 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7550, train error: 0.108017 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7600, train error: 0.108732 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7650, train error: 0.108287 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7700, train error: 0.108638 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7750, train error: 0.109368 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7800, train error: 0.110067 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7850, train error: 0.108312 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7900, train error: 0.109007 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 7950, train error: 0.109842 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8000, train error: 0.109288 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8050, train error: 0.108797 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8100, train error: 0.109135 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8150, train error: 0.109597 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8200, train error: 0.109489 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8250, train error: 0.109228 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8300, train error: 0.108917 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8350, train error: 0.108977 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8400, train error: 0.10914 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8450, train error: 0.109303 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
step 8500, train error: 0.109001 | batch_size(step.eval(),arg.batch_size): 4479,4479 log_learning_rate: -2.2307813645897703 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6627172/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1329, in save
    self.last_checkpoints, latest_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 745, in update_checkpoint_state
    text_format.MessageToString(ckpt))
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_BT_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_BT_8D_units2_Adam/hp_stid_74/checkpoint.tmp1705edc0542a446f8c2400ce87d935a5
