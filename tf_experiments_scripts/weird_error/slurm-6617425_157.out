I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: Tesla K20m
major: 3 minor: 5 memoryClockRate (GHz) 0.7055
pciBusID 0000:02:00.0
Total memory: 4.66GiB
Free memory: 4.59GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla K20m, pci bus id: 0000:02:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'pickle_file', 'slurm-6617425_154.out', '1', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'h_add_data_and_mesh.npz', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', '.swn', 'slurm-6617425_13.out', 'test_print.py', 'om_f_8D_single_relu', 'slurm-6617425_27.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'batch_main.py', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'os_walk_test', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'output.file', 'hp_gpu', 'slurm-6617425_21.out', 'my_tf_proj.egg-info', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617425_3.out', 'slurm-6617425_9.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'extract_results_matplotlib.py', '.swp', 'slurm-6617425_162.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617425_22.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617425_6.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617425_19.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 0.0987085 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 50, train error: 0.0978819 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 100, train error: 0.0976312 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 150, train error: 0.0973904 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 200, train error: 0.0974155 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 250, train error: 0.0973892 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 300, train error: 0.0974323 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 350, train error: 0.0973977 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 400, train error: 0.0973674 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 450, train error: 0.0974085 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 500, train error: 0.0974457 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 550, train error: 0.0974089 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 600, train error: 0.0974307 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 650, train error: 0.0974501 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 700, train error: 0.0974602 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 750, train error: 0.0975285 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 800, train error: 0.0974904 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 850, train error: 0.0975561 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 900, train error: 0.0975959 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 950, train error: 0.097659 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1000, train error: 0.0977017 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1050, train error: 0.0977527 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1100, train error: 0.0977352 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1150, train error: 0.0978219 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1200, train error: 0.097789 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1250, train error: 0.0978596 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1300, train error: 0.0978241 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1350, train error: 0.0978541 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1400, train error: 0.097878 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1450, train error: 0.0979694 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1500, train error: 0.0978517 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1550, train error: 0.0979363 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1600, train error: 0.0979468 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1650, train error: 0.0979761 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1700, train error: 0.0980303 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1750, train error: 0.0979923 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1800, train error: 0.0980398 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1850, train error: 0.0979531 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1900, train error: 0.0979994 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 1950, train error: 0.0979887 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2000, train error: 0.0980014 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2050, train error: 0.0980444 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2100, train error: 0.0980845 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2150, train error: 0.0980853 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2200, train error: 0.098124 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2250, train error: 0.0982466 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2300, train error: 0.0981111 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2350, train error: 0.0982759 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2400, train error: 0.0982088 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2450, train error: 0.0982906 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2500, train error: 0.0982058 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2550, train error: 0.0982874 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2600, train error: 0.0982661 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2650, train error: 0.0982642 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2700, train error: 0.0983263 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2750, train error: 0.0983177 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2800, train error: 0.098336 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2850, train error: 0.0982878 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2900, train error: 0.0984507 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 2950, train error: 0.098473 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3000, train error: 0.0984195 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3050, train error: 0.098394 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3100, train error: 0.0984066 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3150, train error: 0.0983827 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3200, train error: 0.0984173 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3250, train error: 0.0984529 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3300, train error: 0.0984846 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3350, train error: 0.098637 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3400, train error: 0.0984931 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3450, train error: 0.0985549 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3500, train error: 0.0986247 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3550, train error: 0.0986238 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3600, train error: 0.0985852 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3650, train error: 0.0986108 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3700, train error: 0.0987156 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3750, train error: 0.0986233 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3800, train error: 0.0987517 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3850, train error: 0.0987094 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3900, train error: 0.0987319 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 3950, train error: 0.0987463 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4000, train error: 0.0987188 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4050, train error: 0.0988095 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4100, train error: 0.0987414 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4150, train error: 0.0988535 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4200, train error: 0.0988436 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4250, train error: 0.0988775 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4300, train error: 0.0987984 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4350, train error: 0.0987924 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4400, train error: 0.098822 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4450, train error: 0.0987803 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4500, train error: 0.0987601 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4550, train error: 0.0987652 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4600, train error: 0.0987556 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4650, train error: 0.0988277 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4700, train error: 0.0988023 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4750, train error: 0.0988262 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4800, train error: 0.0988143 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4850, train error: 0.098864 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4900, train error: 0.0987742 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 4950, train error: 0.0989543 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5000, train error: 0.0988674 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5050, train error: 0.09887 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5100, train error: 0.0988359 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5150, train error: 0.098953 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5200, train error: 0.0989932 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5250, train error: 0.0989657 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5300, train error: 0.099023 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5350, train error: 0.0989921 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5400, train error: 0.0990452 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5450, train error: 0.0991258 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5500, train error: 0.0990274 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5550, train error: 0.0991372 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5600, train error: 0.099077 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5650, train error: 0.0990307 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5700, train error: 0.0991287 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5750, train error: 0.0990486 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5800, train error: 0.0991582 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5850, train error: 0.0990885 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5900, train error: 0.0991472 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 5950, train error: 0.0991013 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6000, train error: 0.0991342 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6050, train error: 0.0991403 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6100, train error: 0.0991554 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6150, train error: 0.0991636 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6200, train error: 0.099151 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6250, train error: 0.0992726 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6300, train error: 0.0991318 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6350, train error: 0.0992356 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6400, train error: 0.0993026 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6450, train error: 0.0992845 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6500, train error: 0.0992853 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6550, train error: 0.0993686 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6600, train error: 0.0993852 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6650, train error: 0.0994477 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6700, train error: 0.0993914 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6750, train error: 0.0994003 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6800, train error: 0.0994058 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6850, train error: 0.0993627 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6900, train error: 0.0993585 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 6950, train error: 0.0994435 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7000, train error: 0.0992977 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7050, train error: 0.0995731 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7100, train error: 0.0994962 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7150, train error: 0.0995388 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7200, train error: 0.0995538 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7250, train error: 0.0996637 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7300, train error: 0.0995918 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7350, train error: 0.0997633 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7400, train error: 0.0997034 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7450, train error: 0.0997116 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7500, train error: 0.0997157 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7550, train error: 0.0997056 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7600, train error: 0.0998522 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7650, train error: 0.0997841 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7700, train error: 0.0999023 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7750, train error: 0.0998997 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7800, train error: 0.0999147 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7850, train error: 0.0999865 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7900, train error: 0.0998596 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 7950, train error: 0.0999136 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8000, train error: 0.0999792 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8050, train error: 0.0998763 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8100, train error: 0.100077 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8150, train error: 0.100056 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8200, train error: 0.0999909 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8250, train error: 0.100029 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8300, train error: 0.100104 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8350, train error: 0.100016 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8400, train error: 0.100188 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8450, train error: 0.100042 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8500, train error: 0.100184 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8550, train error: 0.0999996 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8600, train error: 0.100309 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8650, train error: 0.100041 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8700, train error: 0.100255 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8750, train error: 0.100087 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8800, train error: 0.100258 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8850, train error: 0.100149 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8900, train error: 0.100155 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 8950, train error: 0.100222 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9000, train error: 0.100098 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9050, train error: 0.100204 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9100, train error: 0.100145 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9150, train error: 0.100282 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9200, train error: 0.100184 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9250, train error: 0.100317 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9300, train error: 0.100275 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9350, train error: 0.100242 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9400, train error: 0.100504 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9450, train error: 0.100319 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9500, train error: 0.10038 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9550, train error: 0.1003 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9600, train error: 0.100335 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9650, train error: 0.100357 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9700, train error: 0.100316 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9750, train error: 0.100309 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9800, train error: 0.100337 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9850, train error: 0.100324 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9900, train error: 0.100389 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 9950, train error: 0.100376 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10000, train error: 0.100365 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10050, train error: 0.100366 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10100, train error: 0.10035 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10150, train error: 0.10042 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10200, train error: 0.100375 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10250, train error: 0.100369 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10300, train error: 0.100279 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10350, train error: 0.100443 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10400, train error: 0.100403 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10450, train error: 0.100462 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10500, train error: 0.100478 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10550, train error: 0.100571 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10600, train error: 0.100472 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10650, train error: 0.100517 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10700, train error: 0.100619 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10750, train error: 0.100567 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10800, train error: 0.100625 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10850, train error: 0.100592 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10900, train error: 0.100619 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 10950, train error: 0.100616 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11000, train error: 0.100677 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11050, train error: 0.100766 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11100, train error: 0.100626 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11150, train error: 0.100658 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11200, train error: 0.100834 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11250, train error: 0.10073 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11300, train error: 0.100764 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11350, train error: 0.100778 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11400, train error: 0.100783 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11450, train error: 0.100887 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11500, train error: 0.100792 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11550, train error: 0.100853 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11600, train error: 0.100708 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11650, train error: 0.100687 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11700, train error: 0.100705 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11750, train error: 0.100714 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11800, train error: 0.100782 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11850, train error: 0.10075 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11900, train error: 0.100935 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 11950, train error: 0.100847 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12000, train error: 0.100976 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12050, train error: 0.100941 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12100, train error: 0.10099 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12150, train error: 0.101002 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12200, train error: 0.100957 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12250, train error: 0.10095 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12300, train error: 0.101002 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12350, train error: 0.10091 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12400, train error: 0.100948 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12450, train error: 0.101048 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12500, train error: 0.101017 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12550, train error: 0.101119 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12600, train error: 0.101024 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12650, train error: 0.101079 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12700, train error: 0.101018 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12750, train error: 0.101046 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12800, train error: 0.101096 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12850, train error: 0.101075 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12900, train error: 0.101092 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 12950, train error: 0.101143 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13000, train error: 0.101093 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13050, train error: 0.101181 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13100, train error: 0.101139 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13150, train error: 0.101159 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13200, train error: 0.10123 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13250, train error: 0.101226 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13300, train error: 0.101193 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13350, train error: 0.101244 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13400, train error: 0.101238 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13450, train error: 0.101311 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13500, train error: 0.101316 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13550, train error: 0.101248 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13600, train error: 0.101315 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13650, train error: 0.101186 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13700, train error: 0.101237 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13750, train error: 0.101382 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13800, train error: 0.101352 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13850, train error: 0.101298 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13900, train error: 0.101402 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 13950, train error: 0.101342 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14000, train error: 0.101394 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14050, train error: 0.101375 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14100, train error: 0.101424 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14150, train error: 0.101453 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14200, train error: 0.101469 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14250, train error: 0.101454 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14300, train error: 0.101492 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14350, train error: 0.101418 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14400, train error: 0.10141 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14450, train error: 0.101455 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14500, train error: 0.101446 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14550, train error: 0.101434 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14600, train error: 0.101447 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14650, train error: 0.101422 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14700, train error: 0.101443 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14750, train error: 0.101467 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14800, train error: 0.101503 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14850, train error: 0.101454 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14900, train error: 0.101493 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 14950, train error: 0.101497 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15000, train error: 0.101494 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15050, train error: 0.101467 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15100, train error: 0.101538 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15150, train error: 0.101574 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15200, train error: 0.101523 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15250, train error: 0.101529 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15300, train error: 0.101545 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15350, train error: 0.101601 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15400, train error: 0.101525 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15450, train error: 0.101608 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15500, train error: 0.10155 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15550, train error: 0.101621 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15600, train error: 0.101587 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15650, train error: 0.101492 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15700, train error: 0.101554 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15750, train error: 0.101559 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15800, train error: 0.101601 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15850, train error: 0.101532 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15900, train error: 0.101684 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 15950, train error: 0.101572 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16000, train error: 0.101674 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16050, train error: 0.101752 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16100, train error: 0.101662 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16150, train error: 0.101696 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16200, train error: 0.101644 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16250, train error: 0.101665 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16300, train error: 0.101719 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16350, train error: 0.101673 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16400, train error: 0.101691 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16450, train error: 0.101669 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16500, train error: 0.101695 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16550, train error: 0.101675 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16600, train error: 0.101615 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16650, train error: 0.101634 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16700, train error: 0.10163 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16750, train error: 0.101619 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16800, train error: 0.101632 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16850, train error: 0.101561 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16900, train error: 0.101624 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 16950, train error: 0.101543 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17000, train error: 0.10163 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17050, train error: 0.101648 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17100, train error: 0.101649 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17150, train error: 0.101678 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17200, train error: 0.101721 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17250, train error: 0.101712 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17300, train error: 0.10167 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17350, train error: 0.101719 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17400, train error: 0.101756 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17450, train error: 0.101736 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17500, train error: 0.101767 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17550, train error: 0.101704 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17600, train error: 0.101721 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17650, train error: 0.101708 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17700, train error: 0.101783 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17750, train error: 0.101734 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17800, train error: 0.101782 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17850, train error: 0.101802 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17900, train error: 0.101796 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 17950, train error: 0.101822 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18000, train error: 0.101849 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18050, train error: 0.101851 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18100, train error: 0.101823 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18150, train error: 0.101892 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18200, train error: 0.10191 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18250, train error: 0.101871 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18300, train error: 0.101898 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18350, train error: 0.101907 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18400, train error: 0.101923 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18450, train error: 0.101941 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18500, train error: 0.101869 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18550, train error: 0.101918 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18600, train error: 0.101975 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18650, train error: 0.101944 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18700, train error: 0.102041 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18750, train error: 0.102005 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18800, train error: 0.102066 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18850, train error: 0.10211 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
step 18900, train error: 0.102099 | batch_size(step.eval(),arg.batch_size): 11844,11844 log_learning_rate: -3.435691856136494 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6623665/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1335, in save
    self.export_meta_graph(meta_graph_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1368, in export_meta_graph
    clear_devices=clear_devices)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1590, in export_meta_graph
    **kwargs)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/meta_graph.py", line 651, in export_scoped_meta_graph
    as_text=as_text)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/training_util.py", line 148, in write_graph
    file_io.atomic_write_string_to_file(path, graph_def.SerializeToString())
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_BT_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_BT_8D_units5_Adam/hp_stid_157/mdl_ckpt.meta.tmp7e61ebd14087482bafbaedaaefb04797
