I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcublas.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcudnn.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcufft.so locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcuda.so.1 locally
I tensorflow/stream_executor/dso_loader.cc:128] successfully opened CUDA library libcurand.so locally
I tensorflow/core/common_runtime/gpu/gpu_device.cc:885] Found device 0 with properties: 
name: Tesla K20m
major: 3 minor: 5 memoryClockRate (GHz) 0.7055
pciBusID 0000:03:00.0
Total memory: 4.66GiB
Free memory: 4.59GiB
I tensorflow/core/common_runtime/gpu/gpu_device.cc:906] DMA: 0 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:916] 0:   Y 
I tensorflow/core/common_runtime/gpu/gpu_device.cc:975] Creating TensorFlow device (/gpu:0) -> (device: 0, name: Tesla K20m, pci bus id: 0000:03:00.0)
#!/usr/bin/env python
#!/usr/bin/python
>>> arg.restore =  False
['slurm-6617426_141.out', 'slurm-6617425_153.out', 'slurm-6617425_16.out', 'job_might_be_cancelled.txt', 'extract_results.py', 'slurm-6617425_8.out', 'slurm-6617426_60.out', 'slurm-6617426_161.out', 'slurm-6617426_66.out', 'slurm-6617426_117.out', 'slurm-6617426_136.out', 'slurm-6617426_54.out', 'f2D_plot_original_func.py', 'get_data_shuffled_coords.py', 'make_to_matlab.py', 'slurm-6617548_84.out', 'pickle_file', 'slurm-6617425_154.out', 'slurm-6617426_181.out', 'slurm-6617426_160.out', '1', 'slurm-6617426_142.out', 'f2D_krls.py', 'slurm-6617425_148.out', 'scripts_for_plotting', 'slurm-6617425_20.out', 'slurm-6617426_65.out', 'slurm-6617426_56.out', 'h_add_data_and_mesh.npz', 'slurm-6617548_83.out', 'slurm-6617548_87.out', 'slurm-6617425_7.out', 'data', 'before_vs_after_shuffle.py', 'slurm-6617425_155.out', 'data_om', '.swo', 'slurm-6617425_24.out', 'slurm-6617426_70.out', 'slurm-6617548_78.out', 'slurm-6617426_74.out', 'slurm-6617426_162.out', 'param_counter.py', 'hp_cpu', 'pca_mnist.py', 'slurm-6617425_157.out', 'slurm-6617425_156.out', 'binary_tree_with_f4d_data_float32.py', 'slurm-6617548_86.out', '.swn', 'slurm-6617426_12.out', 'slurm-6617548_80.out', 'slurm-6617425_13.out', 'test_print.py', 'slurm-6617426_123.out', 'slurm-6617426_115.out', 'om_f_8D_single_relu', 'slurm-6617426_116.out', 'slurm-6617426_73.out', 'slurm-6617425_27.out', 'slurm-6617426_53.out', 'slurm-6617425_26.out', 'delete.py', 'slurm-6617425_15.out', 'get_sense_of_data.py', 'om_f_4D_conv_2nd', 'slurm-6617426_134.out', 'slurm-6617426_62.out', 'slurm-6617426_121.out', 'slurm-6617426_122.out', 'slurm-6617426_119.out', 'slurm-6617426_69.out', 'batch_main.py', 'slurm-6617426_127.out', 'binary_tree_workspace', 'slurm-6617425_160.out', 'slurm-6617425_14.out', 'slurm-6617548_81.out', 'slurm-6617548_77.out', 'slurm-6617426_68.out', 'os_walk_test', 'slurm-6617426_72.out', 'slurm-6617426_135.out', 'slurm-6617426_159.out', 'parser_test.py', 'unit_test_large_hp.py', 'f2D_krls_random.py', 'generate_product_func.py', 'slurm-6617426_71.out', 'slurm-6617425_158.out', 'slurm-6617425_151.out', '__pycache__', 'slurm-6617426_57.out', 'slurm-6617426_143.out', 'plot_graphs.py', 'slurm-6617425_4.out', 'h_gabor_data_and_mesh.npz', 'slurm-6617426_52.out', 'slurm-6617548_79.out', 'slurm-6617426_58.out', 'output.file', 'slurm-6617426_137.out', 'slurm-6617426_124.out', 'hp_gpu', 'slurm-6617426_144.out', 'slurm-6617425_21.out', 'slurm-6617426_145.out', 'slurm-6617425_167.out', 'my_tf_proj.egg-info', 'slurm-6617426_120.out', 'generate_f8d.py', 'om_f_4D_conv_2nd_noise_3_0_25std', 'slurm-6617425_10.out', 'generate_2D_data.py', 'slurm-6617425_2.out', 'slurm-6617426_140.out', 'slurm-6617425_3.out', 'slurm-6617548_76.out', 'slurm-6617425_9.out', 'slurm-6617548_88.out', 'slurm-6617425_1.out', 'binary_tree_with_f4d_data.py', 'slurm-6617426_163.out', 'extract_results_matplotlib.py', '.swp', 'slurm-6617425_162.out', 'slurm-6617548_90.out', 'binary_tree_with_f4d_data_hbf_lib_maker.py', 'slurm-6617426_126.out', 'slurm-6617425_22.out', 'slurm-6617548_85.out', 'slurm-6617425_152.out', 'slurm-6617425_18.out', 'slurm-6617548_82.out', 'generate_f4d.py', 'f2D_recursive_krls.py', 'slurm-6617426_139.out', 'om_f_4D_cos_x2_BT', 'slurm-6617425_17.out', 'slurm-6617548_97.out', 'slurm-6617425_6.out', 'slurm-6617426_63.out', 'slurm-6617425_23.out', 'slurm-6617425_161.out', 'krls_plot_errrors_script.py', 'slurm-6617426_64.out', 'slurm-6617426_146.out', 'slurm-6617426_129.out', 'slurm-6617425_19.out', 'slurm-6617426_167.out', 'local_config.py', 'krls_collect_data.py', 'get_arguments.py', 'krls.py', 'slurm-6617426_128.out', 'generate_general_D.py', 'slurm-6617425_149.out', 'slurm-6617425_12.out', 'slurm-6617426_67.out', 'slurm-6617426_59.out', 'slurm-6617426_177.out', 'slurm-6617425_28.out', 'slurm-6617425_25.out', 'slurm-6617426_61.out', 'slurm-6617426_118.out', 'slurm-6617426_138.out', 'slurm-6617548_95.out', 'old_main.py', 'slurm-6617425_5.out', 'slurm-6617425_159.out', 'slurm-6617425_150.out', 'get_new_data_set_with_noise.py', 'get_sense_norm.py', 'slurm-6617426_55.out', 'slurm-6617425_11.out']
(N_train,D) = (60000,8) 
 (N_test,D_out) = (60000,1) 
l  2
+++> std mu for inits_C:  [0, 1.6301610486323184]
arg.beta1 0.99
arg.beta2 0.999
step 0, train error: 12.0952 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 50, train error: 11.197 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 100, train error: 10.3463 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 150, train error: 9.54531 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 200, train error: 8.79418 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 250, train error: 8.09301 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 300, train error: 7.44044 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 350, train error: 6.83533 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 400, train error: 6.27554 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 450, train error: 5.75846 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 500, train error: 5.28224 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 550, train error: 4.84422 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 600, train error: 4.44169 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 650, train error: 4.07186 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 700, train error: 3.7321 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 750, train error: 3.42025 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 800, train error: 3.13426 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 850, train error: 2.87195 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 900, train error: 2.63154 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 950, train error: 2.4113 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1000, train error: 2.20961 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1050, train error: 2.02523 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1100, train error: 1.85668 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1150, train error: 1.70259 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1200, train error: 1.56202 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1250, train error: 1.43389 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1300, train error: 1.31718 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1350, train error: 1.21105 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1400, train error: 1.11471 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1450, train error: 1.02727 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1500, train error: 0.9708 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1550, train error: 0.951473 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1600, train error: 0.932739 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1650, train error: 0.914424 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1700, train error: 0.896441 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1750, train error: 0.878724 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1800, train error: 0.861271 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1850, train error: 0.844067 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1900, train error: 0.827098 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 1950, train error: 0.810353 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2000, train error: 0.793835 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2050, train error: 0.777563 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2100, train error: 0.761524 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2150, train error: 0.745733 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2200, train error: 0.730195 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2250, train error: 0.714921 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2300, train error: 0.699935 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2350, train error: 0.68525 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2400, train error: 0.670842 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2450, train error: 0.656734 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2500, train error: 0.642903 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2550, train error: 0.629363 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2600, train error: 0.616127 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2650, train error: 0.603205 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2700, train error: 0.590614 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2750, train error: 0.578349 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2800, train error: 0.56638 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2850, train error: 0.554716 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2900, train error: 0.543334 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 2950, train error: 0.532243 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3000, train error: 0.527677 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3050, train error: 0.524911 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3100, train error: 0.522148 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3150, train error: 0.519385 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3200, train error: 0.516617 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3250, train error: 0.513837 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3300, train error: 0.511041 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3350, train error: 0.508235 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3400, train error: 0.505421 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3450, train error: 0.502598 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3500, train error: 0.499767 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3550, train error: 0.496926 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3600, train error: 0.49408 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3650, train error: 0.491231 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3700, train error: 0.488378 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3750, train error: 0.48552 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3800, train error: 0.482657 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3850, train error: 0.479792 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3900, train error: 0.47693 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 3950, train error: 0.474068 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4000, train error: 0.471204 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4050, train error: 0.468345 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4100, train error: 0.46549 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4150, train error: 0.462637 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4200, train error: 0.459789 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4250, train error: 0.45695 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4300, train error: 0.454124 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4350, train error: 0.451301 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4400, train error: 0.44849 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4450, train error: 0.44602 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4500, train error: 0.4453 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4550, train error: 0.444577 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4600, train error: 0.443851 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4650, train error: 0.443119 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4700, train error: 0.442382 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4750, train error: 0.44164 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4800, train error: 0.440894 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4850, train error: 0.440144 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4900, train error: 0.439389 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 4950, train error: 0.438627 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5000, train error: 0.437861 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5050, train error: 0.437092 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5100, train error: 0.436318 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5150, train error: 0.435538 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5200, train error: 0.434755 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5250, train error: 0.433967 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5300, train error: 0.433178 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5350, train error: 0.432384 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5400, train error: 0.431586 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5450, train error: 0.430785 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5500, train error: 0.429981 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5550, train error: 0.429174 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5600, train error: 0.428366 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5650, train error: 0.427555 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5700, train error: 0.426742 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5750, train error: 0.425928 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5800, train error: 0.425111 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5850, train error: 0.424292 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5900, train error: 0.423471 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 5950, train error: 0.42298 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6000, train error: 0.422769 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6050, train error: 0.422557 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6100, train error: 0.422344 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6150, train error: 0.42213 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6200, train error: 0.421914 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6250, train error: 0.421697 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6300, train error: 0.421478 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6350, train error: 0.421259 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6400, train error: 0.421038 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6450, train error: 0.420817 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6500, train error: 0.420596 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6550, train error: 0.420373 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6600, train error: 0.42015 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6650, train error: 0.419925 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6700, train error: 0.4197 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6750, train error: 0.419474 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6800, train error: 0.419247 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6850, train error: 0.41902 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6900, train error: 0.418792 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 6950, train error: 0.418563 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7000, train error: 0.418334 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7050, train error: 0.418103 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7100, train error: 0.417873 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7150, train error: 0.417642 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7200, train error: 0.417411 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7250, train error: 0.417179 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7300, train error: 0.416947 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7350, train error: 0.416715 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7400, train error: 0.416484 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7450, train error: 0.416408 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7500, train error: 0.416346 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7550, train error: 0.416284 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7600, train error: 0.416222 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7650, train error: 0.41616 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7700, train error: 0.416097 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7750, train error: 0.416034 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7800, train error: 0.415971 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7850, train error: 0.415909 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7900, train error: 0.415845 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 7950, train error: 0.415782 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8000, train error: 0.415719 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8050, train error: 0.415655 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8100, train error: 0.415592 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8150, train error: 0.415528 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8200, train error: 0.415464 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8250, train error: 0.4154 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8300, train error: 0.415336 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8350, train error: 0.415272 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8400, train error: 0.415208 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8450, train error: 0.415144 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8500, train error: 0.41508 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8550, train error: 0.415016 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8600, train error: 0.414952 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8650, train error: 0.414888 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8700, train error: 0.414824 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8750, train error: 0.41476 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8800, train error: 0.414695 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8850, train error: 0.414631 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8900, train error: 0.414582 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 8950, train error: 0.414568 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9000, train error: 0.414553 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9050, train error: 0.414539 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9100, train error: 0.414525 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9150, train error: 0.41451 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9200, train error: 0.414496 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9250, train error: 0.414482 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9300, train error: 0.414467 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9350, train error: 0.414453 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9400, train error: 0.414439 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9450, train error: 0.414425 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9500, train error: 0.41441 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9550, train error: 0.414396 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9600, train error: 0.414382 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9650, train error: 0.414368 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9700, train error: 0.414353 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9750, train error: 0.414339 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9800, train error: 0.414325 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9850, train error: 0.414311 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9900, train error: 0.414296 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 9950, train error: 0.414282 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10000, train error: 0.414268 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10050, train error: 0.414253 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10100, train error: 0.414239 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10150, train error: 0.414224 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10200, train error: 0.41421 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10250, train error: 0.414195 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10300, train error: 0.414181 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10350, train error: 0.414167 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10400, train error: 0.41416 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10450, train error: 0.414157 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10500, train error: 0.414154 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10550, train error: 0.414151 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10600, train error: 0.414148 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10650, train error: 0.414144 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10700, train error: 0.414141 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10750, train error: 0.414138 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10800, train error: 0.414135 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10850, train error: 0.414132 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10900, train error: 0.414129 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 10950, train error: 0.414125 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11000, train error: 0.414122 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11050, train error: 0.414119 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11100, train error: 0.414116 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11150, train error: 0.414113 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11200, train error: 0.414109 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11250, train error: 0.414106 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11300, train error: 0.414103 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11350, train error: 0.4141 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11400, train error: 0.414097 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11450, train error: 0.414093 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11500, train error: 0.41409 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11550, train error: 0.414087 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11600, train error: 0.414084 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11650, train error: 0.414081 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11700, train error: 0.414077 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11750, train error: 0.414074 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11800, train error: 0.414071 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11850, train error: 0.414068 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11900, train error: 0.414067 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 11950, train error: 0.414067 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12000, train error: 0.414067 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12050, train error: 0.414066 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12100, train error: 0.414066 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12150, train error: 0.414066 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12200, train error: 0.414066 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12250, train error: 0.414065 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
step 12300, train error: 0.414065 | batch_size(step.eval(),arg.batch_size): 9364,9364 log_learning_rate: -3.9734640619448474 
Traceback (most recent call last):
  File "/home/slurm/slurmd/job6629462/slurm_script", line 572, in <module>
    main_hp.main_hp(arg)
  File "/om/user/brando90/home_simulation_research/hbf_tensorflow_code/my_tf_proj/my_tf_pkg/main_hp.py", line 325, in main_hp
    saver.save(sess=sess,save_path=arg.path_to_ckpt+arg.hp_folder_for_ckpt+arg.prefix_ckpt)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1335, in save
    self.export_meta_graph(meta_graph_filename)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1368, in export_meta_graph
    clear_devices=clear_devices)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/saver.py", line 1590, in export_meta_graph
    **kwargs)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/meta_graph.py", line 651, in export_scoped_meta_graph
    as_text=as_text)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/training/training_util.py", line 148, in write_graph
    file_io.atomic_write_string_to_file(path, graph_def.SerializeToString())
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 350, in atomic_write_string_to_file
    write_string_to_file(temp_pathname, contents)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 249, in write_string_to_file
    f.write(file_content)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 90, in write
    self._prewrite_check()
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/lib/io/file_io.py", line 82, in _prewrite_check
    compat.as_bytes(self.__name), compat.as_bytes(self.__mode), status)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/contextlib.py", line 66, in __exit__
    next(self.gen)
  File "/home/brando90/.conda/envs/tf_gpu/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py", line 469, in raise_exception_on_not_ok_status
    pywrap_tensorflow.TF_GetCode(status))
tensorflow.python.framework.errors_impl.ResourceExhaustedError: ../../all_ckpts/om_f_8D_product_continuous/task_Mar_2_NN_8D_Adam_xavier_relu_N60000_original_setup/job_mdl_folder_NN_8D_units14_Adam/hp_stid_95/mdl_ckpt.meta.tmpa43f58c525cc41e7a0c47eb080a86a1e
